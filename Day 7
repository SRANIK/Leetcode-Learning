104. Maximum Depth of Binary Tree (Easy)

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Constraints:
•	The number of nodes in the tree is in the range [0, 104].
•	-100 <= Node.val <= 100

Example 1:
 
Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:
Input: root = [1,null,2]
Output: 2


//Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int maxDepth(struct TreeNode* root) {

    if (root == NULL) {
        return 0; 
    }

    
    int leftDepth = maxDepth(root->left);
    int rightDepth = maxDepth(root->right);

    
    return 1 + (leftDepth > rightDepth ? leftDepth : rightDepth);
}



Time Complexity
The maxDepth function traverses each node of the binary tree exactly once. This means that the time complexity is proportional to the number of nodes in the tree. Let n be the number of nodes in the tree. Hence, the time complexity is:
O(n)

Space Complexity
The space complexity is determined by the maximum depth of the recursion stack. In the worst case, the depth of the recursion stack will be equal to the height of the binary tree.
•	For a balanced binary tree, the height is approximately log(n), so the space complexity is O(log(n)).
•	For a completely unbalanced binary tree (like a linked list), the height is nn, so the space complexity is O(n).

