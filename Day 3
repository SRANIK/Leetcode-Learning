1009. Complement of Base 10 Integer

The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.

Given an integer n, return its complement.

Constraints:

0 <= n < 109

Example 1:
Input: n = 5
Output: 2
Explanation: 5 is "101" in binary, with complement "010" in binary, which is 2 in base-10.

Example 2:
Input: n = 7
Output: 0
Explanation: 7 is "111" in binary, with complement "000" in binary, which is 0 in base-10.

Example 3:
Input: n = 10
Output: 5
Explanation: 10 is "1010" in binary, with complement "0101" in binary, which is 5 in base-10.

//Code
int bitwiseComplement(int n) {
    if (n == 0)
    {
        return 1;
    }

    int sum = 0;

    for(int i = 0; n; i++)
    {
        sum |= ((n&1)^1)<<i;
        n>>=1;
    }

    return sum;
}


Time Complexity:
1.	Initial Check:
•	if (n == 0): This is an O(1) operation.
2.	Loop:
•	for(int i = 0; n; i++): This loop runs while n is non-zero. In each iteration:

sum |= ((n&1)^1)<<i: This is an O(1) operation.

•	n>>=1: This effectively divides n by 2.

Since n is divided by 2 in each iteration, the number of iterations is proportional to the number of bits in n. The number of bits in n is approximately log2(n). Hence, the loop runs O(log n) times.
Therefore, the overall time complexity is: O(log n)
Space Complexity:
1.	Variables:
o	int sum: Takes O(1) space.
o	int i: Loop variable, takes O(1) space.
The function does not use any additional space that scales with the size of the input.
Therefore, the space complexity is: O(1)

