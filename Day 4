263. Ugly Number

An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.

Given an integer n, return true if n is an ugly number.

Constraints:
•	-231 <= n <= 231 - 1
 

Example 1:
Input: n = 6
Output: true
Explanation: 6 = 2 × 3

Example 2:
Input: n = 1
Output: true
Explanation: 1 has no prime factors.
Example 3:

Input: n = 14
Output: false
Explanation: 14 is not ugly since it includes the prime factor 7.

//Code
bool isUgly(int n) {
    if(n<=0)
    {
        return false;
    }

    while(n>1)
    {
        if(n%2 == 0)
        {
            n = n/2;
        }
        else if(n%3 == 0)
        {
            n = n/3;
        }
        else if(n%5 == 0)
        {
            n = n/5;
        }
        else
        {
            break;
        }
    }

    return(n == 1);
}


Time Complexity:
1.	Initial Check:
o	if(n<=0): This is an O(1) operation.
2.	While Loop:
o	while(n>1): This loop continues to divide n by 2, 3, or 5 until n is less than or equal to 1.
o	In each iteration, the value of n is reduced by a factor of 2, 3, or 5. In the worst case, n is reduced by the smallest factor (2) in each iteration.
Since n is divided by 2 in each iteration, the number of iterations is proportional to the number of times n can be divided by 2 until it becomes 1. This is approximately log2(n). Therefore, the time complexity is: O(log n)
Space Complexity:
1.	Variables:
o	int n: The input integer.
o	The function uses a few additional variables to store the intermediate results of the division operations, but these do not depend on the size of the input.
There are no additional data structures used that scale with the input size.
Therefore, the space complexity is: O(1)

