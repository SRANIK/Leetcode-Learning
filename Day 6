100. Same Tree (Easy)

Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
Constraints:
•	The number of nodes in both trees is in the range [0, 100].
•	-104 <= Node.val <= 104
Example 1:
 
Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:
 
Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:
 
Input: p = [1,2,1], q = [1,1,2]
Output: false

//Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isSameTree(struct TreeNode* p, struct TreeNode* q) {
    //Return true if both nodes (p and q) are null.
    if(p == NULL && q == NULL)
    {
        return true;
    }
   //Return false if only one node is null.
    else if(p == NULL || q == NULL)
    {
        return false;
    }
    else
    {
        return ((p->val == q->val) && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
    }

}
Return the result of:
•	Comparing the values of current nodes (p->val and q->val).
•	Recursively checking left subtrees (p->left and q->left).
•	Recursively checking right subtrees (p->right and q->right).

Time Complexity:
Worst-case scenario: Both trees have the same structure and the same number of nodes. Let's say each tree has n nodes.
Time complexity: O(n)

Space Complexity:
In a balanced tree, the space complexity will be O(log(n)), and trees are completely unbalanced (skewed), the space complexity will be O(n).
