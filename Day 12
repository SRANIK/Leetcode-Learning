1816. Truncate Sentence(Easy)

A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).
•	For example, "Hello World", "HELLO", and "hello world hello world" are all sentences.
You are given a sentence s and an integer k. You want to truncate s such that it contains only the first k words. Return s after truncating it.


Example 1:
Input: s = "Hello how are you Contestant", k = 4
Output: "Hello how are you"
Explanation:
The words in s are ["Hello", "how" "are", "you", "Contestant"].
The first 4 words are ["Hello", "how", "are", "you"].
Hence, you should return "Hello how are you".
Example 2:
Input: s = "What is the solution to this problem", k = 4
Output: "What is the solution"
Explanation:
The words in s are ["What", "is" "the", "solution", "to", "this", "problem"].
The first 4 words are ["What", "is", "the", "solution"].
Hence, you should return "What is the solution".
Example 3:
Input: s = "chopper is not a tanuki", k = 5
Output: "chopper is not a tanuki"

Constraints:
•	1 <= s.length <= 500
•	k is in the range [1, the number of words in s].
•	s consists of only lowercase and uppercase English letters and spaces.
•	The words in s are separated by a single space.
•	There are no leading or trailing spaces.

//Code
char* truncateSentence(char* s, int k) {
    int count=0,i;

    for(i = 0; s[i]!= '\0'; i++)
    {
        if(s[i] == ' ')
        {
            count++;
        }
        if(count == k)
        {
            break;
        }
    }
    s[i] = '\0';
    return s;
}

Time complexity is O(n).
Space Complexity
The function modifies the input string s in place and does not use any additional data structures that depend on the size of the input. The only extra space used is for a few integer variables (count and i).
Hence, the space complexity is O(1).

