2154. Keep Multiplying Found Values by Two

You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.

You then do the following steps:
1.	If original is found in nums, multiply it by two (i.e., set original = 2 * original).
2.	Otherwise, stop the process.
3.	Repeat this process with the new number as long as you keep finding the number.
Return the final value of original.

Constraints:
•	1 <= nums.length <= 1000
•	1 <= nums[i], original <= 1000

Example 1:
Input: nums = [5,3,6,1,12], original = 3
Output: 24
Explanation: 
- 3 is found in nums. 3 is multiplied by 2 to obtain 6.
- 6 is found in nums. 6 is multiplied by 2 to obtain 12.
- 12 is found in nums. 12 is multiplied by 2 to obtain 24.
- 24 is not found in nums. Thus, 24 is returned.

Example 2:
Input: nums = [2,7,9], original = 4
Output: 4
Explanation:
- 4 is not found in nums. Thus, 4 is returned.

//Code
int findFinalValue(int* nums, int numsSize, int original) {

    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i] == original)
        {
            original = 2 * original;
            i = -1; //if i= 0 it will start with index i 
        }
    }

    return original;
}


Time Complexity:
1.	Loop Analysis:
o	The outer loop runs from i = 0 to i < numsSize. Under normal circumstances, this would be an O(n) loop.
o	However, since i is set to -1 each time a match is found, it causes the loop to restart. In the worst case, this could result in multiple passes through the array.
2.	Worst-case scenario:
o	Suppose original is found and doubled multiple times. Each time a match is found, the loop could start over, resulting in a potential O(n) operation each time.
o	The number of times the loop resets depends on how many times original is found and doubled. If it can be doubled k times, the loop could run O(k * n) in the worst case.
Given these factors, the worst-case time complexity can be considered as: O(k * n) where k is the number of doublings. In the worst case, this could approach O(n^2) if k and n are large.
Space Complexity:
1.	Variables:
o	int original: Takes O(1) space.
o	Loop variables: int i and intermediate calculations.
Since the function does not use any additional data structures or memory that scale with the input size, the space complexity is: O(1)


