977. Squares of a Sorted Array (Easy)

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
 
Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
Constraints:
•	1 <= nums.length <= 104
•	-104 <= nums[i] <= 104
•	nums is sorted in non-decreasing order.

//Code
int* sortedSquares(int* nums, int numsSize, int* returnSize) {
    
    int* result = (int*)malloc(numsSize * sizeof(int));
    *returnSize = numsSize;

    int left = 0, right = numsSize - 1;
    int index = numsSize - 1; 

    while (left <= right) {
        int leftSquare = nums[left] * nums[left];
        int rightSquare = nums[right] * nums[right];

        
        if (leftSquare > rightSquare) {
            result[index] = leftSquare;
            left++;
        } else {
            result[index] = rightSquare;
            right--;
        }
        index--;
    }
    return result;
}

Time Complexity: O(n)
Space Complexity: O(n)


Simpler Code -> Sqaure it and sort it
int* sortedSquares(int* nums, int numsSize, int* returnSize) {
    for (int i = 0; i < numsSize; i++) {
	nums[i] = nums[i] * nums[i];
}

for (int i = 0; i < numsSize - 1; i++) {
	for (int j = i + 1; j < numsSize; j++) {
		if (nums[j] < nums[i]) {
			int pom = nums[i];
			nums[i] = nums[j];
			nums[j] = pom;
		}

	}
}
Time Complexity: O(n^2)
Space Complexity: O(n)

