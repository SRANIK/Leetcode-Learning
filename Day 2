1758. Minimum Changes To Make Alternating Binary String

You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string "010" is alternating, while the string "0100" is not.

Return the minimum number of operations needed to make s alternating.

Constraints:
•	1 <= s.length <= 104
•	s[i] is either '0' or '1'.

Example 1:
Input: s = "0100"
Output: 1
Explanation: If you change the last character to '1', s will be "0101", which is alternating.

Example 2:
Input: s = "10"
Output: 0
Explanation: s is already alternating.

Example 3:
Input: s = "1111"
Output: 2
Explanation: You need two operations to reach "0101" or "1010".



//Code
class Solution {
public:
    int minOperations(string s) {
        int n = s.size(); 

        int count1 = 0, count2 = 0; 

        // Pattern 1: "010101..." 
        for (int i = 0; i < n; i++) 
        { 
            if (s[i] != (i % 2 == 0 ? '0' : '1')) { count1++; } 
        } 

        // Pattern 2: "101010..." 
        for (int i = 0; i < n; i++) 
        { 
            if (s[i] != (i % 2 == 0 ? '1' : '0')) { count2++; } 
        } 
        
        return min(count1, count2);
    }
};



Time Complexity:
1.	Initialization: n = s.size();int count1 = 0, count2 = 0  O(1)
2.	Loops  O(n) 
3.	Return Statement:
o	return min(count1, count2); This takes O(1) time.
Since each loop runs independently and each takes O(n) time, the overall time complexity is: O(n) + O(n) = O(n)
Space Complexity:
1.	Variables:
o	int n: Takes O (1) space.
o	int count1 and int count2: Take O(1) space each.
2.	No additional data structures: The function does not use any additional data structures that depend on the size of the input.
Therefore, the space complexity is: O(1)


